# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        def inorder(node):
            if node:
                inorder(node.left)
                self.out.append(node)
                inorder(node.right)
            
        self.out = []
        inorder(root)
        
        sortarr = sorted(self.out, key = lambda x:x.val)
        
        for i in range(len(self.out)):
            if self.out[i] != sortarr[i]:
                self.out[i].val, sortarr[i].val = sortarr[i].val, self.out[i].val
                return        
        
                
